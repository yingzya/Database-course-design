<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.employee.mapper.employeeMapper">
    
    <resultMap type="employee" id="employeeResult">
        <result property="employeeId"    column="employee_id"    />
        <result property="employeeName"    column="employee_name"    />
        <result property="account"    column="account"    />
        <result property="phoneNumber"    column="phone_number"    />
        <result property="accountStatus"    column="account_status"    />
        <result property="lastOperationTime"    column="last_operation_time"    />
    </resultMap>

    <sql id="selectemployeeVo">
        select employee_id, employee_name, account, phone_number, account_status, last_operation_time from employee_management
    </sql>

    <select id="selectemployeeList" parameterType="employee" resultMap="employeeResult">
        <include refid="selectemployeeVo"/>
        <where>  
            <if test="employeeName != null  and employeeName != ''"> and employee_name like concat('%', #{employeeName}, '%')</if>
            <if test="account != null  and account != ''"> and account = #{account}</if>
            <if test="phoneNumber != null  and phoneNumber != ''"> and phone_number = #{phoneNumber}</if>
            <if test="accountStatus != null "> and account_status = #{accountStatus}</if>
            <if test="lastOperationTime != null "> and last_operation_time = #{lastOperationTime}</if>
        </where>
    </select>
    
    <select id="selectemployeeByEmployeeId" parameterType="Long" resultMap="employeeResult">
        <include refid="selectemployeeVo"/>
        where employee_id = #{employeeId}
    </select>

    <insert id="insertemployee" parameterType="employee" useGeneratedKeys="true" keyProperty="employeeId">
        insert into employee_management
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="employeeName != null and employeeName != ''">employee_name,</if>
            <if test="account != null and account != ''">account,</if>
            <if test="phoneNumber != null and phoneNumber != ''">phone_number,</if>
            <if test="accountStatus != null">account_status,</if>
            <if test="lastOperationTime != null">last_operation_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="employeeName != null and employeeName != ''">#{employeeName},</if>
            <if test="account != null and account != ''">#{account},</if>
            <if test="phoneNumber != null and phoneNumber != ''">#{phoneNumber},</if>
            <if test="accountStatus != null">#{accountStatus},</if>
            <if test="lastOperationTime != null">#{lastOperationTime},</if>
         </trim>
    </insert>

    <update id="updateemployee" parameterType="employee">
        update employee_management
        <trim prefix="SET" suffixOverrides=",">
            <if test="employeeName != null and employeeName != ''">employee_name = #{employeeName},</if>
            <if test="account != null and account != ''">account = #{account},</if>
            <if test="phoneNumber != null and phoneNumber != ''">phone_number = #{phoneNumber},</if>
            <if test="accountStatus != null">account_status = #{accountStatus},</if>
            <if test="lastOperationTime != null">last_operation_time = #{lastOperationTime},</if>
        </trim>
        where employee_id = #{employeeId}
    </update>

    <delete id="deleteemployeeByEmployeeId" parameterType="Long">
        delete from employee_management where employee_id = #{employeeId}
    </delete>

    <delete id="deleteemployeeByEmployeeIds" parameterType="String">
        delete from employee_management where employee_id in 
        <foreach item="employeeId" collection="array" open="(" separator="," close=")">
            #{employeeId}
        </foreach>
    </delete>
</mapper>